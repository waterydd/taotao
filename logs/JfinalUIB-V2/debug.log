2016-08-25 13:54:39.177 [] [] INFO [main] <GenerateCode.java [90] - main> <启动ConfigCore start ......> 
2016-08-25 13:54:39.177 [] [] INFO [main] <ConfigCore.java [53] - <init>> <Beetl设置> 
2016-08-25 13:54:39.177 [] [] DEBUG [main] <ToolBeetl.java [41] - regiseter> <注册全局web视图模板解析> 
2016-08-25 13:54:39.240 [] [] DEBUG [main] <ToolBeetl.java [55] - regiseter> <注册全局BeetlKit模板解析> 
2016-08-25 13:54:39.240 [] [] INFO [main] <ConfigCore.java [56] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 13:54:39.255 [] [] INFO [main] <ConfigCore.java [64] - <init>> <configPlugin 配置Druid数据库连接池大小> 
2016-08-25 13:54:39.255 [] [] INFO [main] <ConfigCore.java [70] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 13:54:39.255 [] [] INFO [main] <ConfigCore.java [78] - <init>> <configPlugin 数据库类型判断> 
2016-08-25 13:54:39.255 [] [] INFO [main] <ConfigCore.java [85] - <init>> <configPlugin 使用数据库类型是 mysql> 
2016-08-25 13:54:39.278 [] [] INFO [main] <ConfigCore.java [105] - <init>> <configPlugin 表扫描注册> 
2016-08-25 13:54:39.409 [] [] INFO [main] <TableScan.java [39] - start> <剔除BaseModelCache> 
2016-08-25 13:54:39.409 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2016-08-25 13:54:39.409 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2016-08-25 13:54:39.409 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2016-08-25 13:54:39.409 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2016-08-25 13:54:39.409 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2016-08-25 13:54:39.425 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.test.mvc.blog.Blog, tableName = test_blog, pkName: ids> 
2016-08-25 13:54:39.979 [] [] INFO [main] <ConfigCore.java [110] - <init>> <ServicePlugin Service注解实例化加载> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = blogService, class = com.test.mvc.blog.BlogService> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2016-08-25 13:54:40.023 [] [] INFO [main] <ConfigCore.java [113] - <init>> <I18NPlugin 国际化键值对加载> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_CN.properties> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_HK.properties> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_TW.properties> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_en_US.properties> 
2016-08-25 13:54:40.023 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_ja.properties> 
2016-08-25 13:54:40.023 [] [] INFO [main] <ConfigCore.java [117] - <init>> <EhCachePlugin EhCache缓存> 
2016-08-25 13:54:40.596 [] [] INFO [main] <ConfigCore.java [127] - <init>> <SqlXmlPlugin 解析并缓存 xml sql> 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2016-08-25 13:54:40.659 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2016-08-25 13:54:40.677 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2016-08-25 13:54:40.677 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2016-08-25 13:54:40.679 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2016-08-25 13:54:40.679 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2016-08-25 13:54:40.680 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2016-08-25 13:54:40.681 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noCheckedFilter, sql content =  select ids, names from pt_group where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.checkedFilter, sql content =  select ids, names from pt_group where ids in ( ${fitler} ) order by names asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noChecked, sql content =  select ids, names from pt_group order by names asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and m.operatorids in ( ${fitler} ) order by orderids asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2016-08-25 13:54:40.696 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, m.names as modulenames, s.names as systemsnames > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2016-08-25 13:54:40.712 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_role order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_role) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_role where ids not in ( select top {1, number, #.#} ids from pt_role ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_role ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2016-08-25 13:54:40.728 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, ui.names, ui.email, ui.mobile, ui.birthday, d.names as deptnames > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.userinfoids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and ui.names like #'%$names$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(email)){ %> and ui.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and ui.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(idCard)){ %> and ui.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> and ui.birthday = #'$birthday$'# <% } %> > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:54:40.743 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = blog.sql.xml, sql key = test.blog.splitPageFrom, sql content =  from test_blog where 1=1 > 
2016-08-25 13:54:40.743 [] [] INFO [main] <ConfigCore.java [131] - <init>> <afterJFinalStart 缓存参数> 
2016-08-25 13:54:40.743 [] [] INFO [main] <ParamInitPlugin.java [89] - start> <缓存参数初始化 start ...> 
2016-08-25 13:54:40.743 [] [] INFO [main] <ParamInitPlugin.java [127] - platform_cacheUser> <缓存加载：User start> 
2016-08-25 13:54:40.759 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:40.943 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:40.943 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:40.943 [] [] INFO [main] <ParamInitPlugin.java [151] - platform_cacheUser> <缓存加载：User end> 
2016-08-25 13:54:40.943 [] [] INFO [main] <ParamInitPlugin.java [159] - platform_cacheUserInfo> <缓存加载：UserInfo start> 
2016-08-25 13:54:40.943 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:40.959 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:40.959 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:40.959 [] [] INFO [main] <ParamInitPlugin.java [183] - platform_cacheUserInfo> <缓存加载：UserInfo end> 
2016-08-25 13:54:40.959 [] [] INFO [main] <ParamInitPlugin.java [191] - platform_cacheGroup> <缓存加载：Group start> 
2016-08-25 13:54:41.003 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:41.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:41.004 [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheGroup> <缓存加载：Group end> 
2016-08-25 13:54:41.004 [] [] INFO [main] <ParamInitPlugin.java [223] - platform_cacheRole> <缓存加载：Role start> 
2016-08-25 13:54:41.004 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:41.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:41.020 [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheRole> <缓存加载：Role end> 
2016-08-25 13:54:41.020 [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheStation> <缓存加载：Station start> 
2016-08-25 13:54:41.020 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:41.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:41.020 [] [] INFO [main] <ParamInitPlugin.java [278] - platform_cacheStation> <缓存加载：Station end> 
2016-08-25 13:54:41.020 [] [] INFO [main] <ParamInitPlugin.java [286] - platform_cacheOperator> <缓存加载：Operator start> 
2016-08-25 13:54:41.020 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:54:41.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:54:41.070 [] [] INFO [main] <ParamInitPlugin.java [311] - platform_cacheOperator> <缓存加载：Operator end> 
2016-08-25 13:54:41.071 [] [] INFO [main] <ParamInitPlugin.java [319] - platform_cacheDict> <缓存加载：Dict start> 
2016-08-25 13:54:41.071 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.074 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:54:41.076 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:54:41.078 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.080 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 13:54:41.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:54:41.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <ParamInitPlugin.java [326] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2016-08-25 13:54:41.159 [] [] INFO [main] <ParamInitPlugin.java [335] - platform_cacheParam> <缓存加载：Param start> 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:54:41.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:54:41.177 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.178 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:54:41.181 [] [] INFO [main] <ParamInitPlugin.java [342] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2016-08-25 13:54:41.181 [] [] INFO [main] <ParamInitPlugin.java [113] - start> <缓存参数初始化 end ...> 
2016-08-25 13:54:41.181 [] [] INFO [main] <GenerateCode.java [92] - main> <启动ConfigCore end ......> 
2016-08-25 13:54:41.181 [] [] INFO [main] <GenerateCode.java [94] - main> <根据不同的数据库加载不同的处理器> 
2016-08-25 13:54:41.181 [] [] INFO [main] <MySQLHandler.java [33] - <init>> <db_type = mysql> 
2016-08-25 13:54:41.181 [] [] INFO [main] <MySQLHandler.java [38] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 13:54:41.181 [] [] INFO [main] <MySQLHandler.java [48] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 13:54:41.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 13:54:41.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 13:57:41.311 [] [] INFO [main] <GenerateCode.java [90] - main> <启动ConfigCore start ......> 
2016-08-25 13:57:41.327 [] [] INFO [main] <ConfigCore.java [53] - <init>> <Beetl设置> 
2016-08-25 13:57:41.327 [] [] DEBUG [main] <ToolBeetl.java [41] - regiseter> <注册全局web视图模板解析> 
2016-08-25 13:57:41.393 [] [] DEBUG [main] <ToolBeetl.java [55] - regiseter> <注册全局BeetlKit模板解析> 
2016-08-25 13:57:41.396 [] [] INFO [main] <ConfigCore.java [56] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 13:57:41.396 [] [] INFO [main] <ConfigCore.java [64] - <init>> <configPlugin 配置Druid数据库连接池大小> 
2016-08-25 13:57:41.396 [] [] INFO [main] <ConfigCore.java [70] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 13:57:41.396 [] [] INFO [main] <ConfigCore.java [78] - <init>> <configPlugin 数据库类型判断> 
2016-08-25 13:57:41.396 [] [] INFO [main] <ConfigCore.java [85] - <init>> <configPlugin 使用数据库类型是 mysql> 
2016-08-25 13:57:41.412 [] [] INFO [main] <ConfigCore.java [105] - <init>> <configPlugin 表扫描注册> 
2016-08-25 13:57:41.528 [] [] INFO [main] <TableScan.java [39] - start> <剔除BaseModelCache> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2016-08-25 13:57:41.543 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.test.mvc.blog.Blog, tableName = test_blog, pkName: ids> 
2016-08-25 13:57:42.129 [] [] INFO [main] <ConfigCore.java [110] - <init>> <ServicePlugin Service注解实例化加载> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = blogService, class = com.test.mvc.blog.BlogService> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2016-08-25 13:57:42.172 [] [] INFO [main] <ConfigCore.java [113] - <init>> <I18NPlugin 国际化键值对加载> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_CN.properties> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_HK.properties> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_TW.properties> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_en_US.properties> 
2016-08-25 13:57:42.172 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_ja.properties> 
2016-08-25 13:57:42.172 [] [] INFO [main] <ConfigCore.java [117] - <init>> <EhCachePlugin EhCache缓存> 
2016-08-25 13:57:42.698 [] [] INFO [main] <ConfigCore.java [127] - <init>> <SqlXmlPlugin 解析并缓存 xml sql> 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2016-08-25 13:57:42.776 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2016-08-25 13:57:42.792 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' > 
2016-08-25 13:57:42.793 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2016-08-25 13:57:42.793 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2016-08-25 13:57:42.794 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2016-08-25 13:57:42.796 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2016-08-25 13:57:42.796 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noCheckedFilter, sql content =  select ids, names from pt_group where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.checkedFilter, sql content =  select ids, names from pt_group where ids in ( ${fitler} ) order by names asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noChecked, sql content =  select ids, names from pt_group order by names asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and m.operatorids in ( ${fitler} ) order by orderids asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 13:57:42.798 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, m.names as modulenames, s.names as systemsnames > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2016-08-25 13:57:42.814 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_role order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_role) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_role where ids not in ( select top {1, number, #.#} ids from pt_role ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_role ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2016-08-25 13:57:42.829 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, ui.names, ui.email, ui.mobile, ui.birthday, d.names as deptnames > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.userinfoids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and ui.names like #'%$names$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(email)){ %> and ui.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and ui.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(idCard)){ %> and ui.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> and ui.birthday = #'$birthday$'# <% } %> > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = blog.sql.xml, sql key = test.blog.splitPageFrom, sql content =  from test_blog where 1=1 > 
2016-08-25 13:57:42.845 [] [] INFO [main] <ConfigCore.java [131] - <init>> <afterJFinalStart 缓存参数> 
2016-08-25 13:57:42.845 [] [] INFO [main] <ParamInitPlugin.java [89] - start> <缓存参数初始化 start ...> 
2016-08-25 13:57:42.845 [] [] INFO [main] <ParamInitPlugin.java [127] - platform_cacheUser> <缓存加载：User start> 
2016-08-25 13:57:42.845 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:42.999 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:42.999 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.014 [] [] INFO [main] <ParamInitPlugin.java [151] - platform_cacheUser> <缓存加载：User end> 
2016-08-25 13:57:43.014 [] [] INFO [main] <ParamInitPlugin.java [159] - platform_cacheUserInfo> <缓存加载：UserInfo start> 
2016-08-25 13:57:43.014 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:43.014 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.014 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.014 [] [] INFO [main] <ParamInitPlugin.java [183] - platform_cacheUserInfo> <缓存加载：UserInfo end> 
2016-08-25 13:57:43.014 [] [] INFO [main] <ParamInitPlugin.java [191] - platform_cacheGroup> <缓存加载：Group start> 
2016-08-25 13:57:43.014 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:43.061 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.061 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.061 [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheGroup> <缓存加载：Group end> 
2016-08-25 13:57:43.061 [] [] INFO [main] <ParamInitPlugin.java [223] - platform_cacheRole> <缓存加载：Role start> 
2016-08-25 13:57:43.061 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:43.077 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.077 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.077 [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheRole> <缓存加载：Role end> 
2016-08-25 13:57:43.077 [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheStation> <缓存加载：Station start> 
2016-08-25 13:57:43.077 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:43.077 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.077 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.077 [] [] INFO [main] <ParamInitPlugin.java [278] - platform_cacheStation> <缓存加载：Station end> 
2016-08-25 13:57:43.077 [] [] INFO [main] <ParamInitPlugin.java [286] - platform_cacheOperator> <缓存加载：Operator start> 
2016-08-25 13:57:43.077 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 13:57:43.095 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.096 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 13:57:43.115 [] [] INFO [main] <ParamInitPlugin.java [311] - platform_cacheOperator> <缓存加载：Operator end> 
2016-08-25 13:57:43.115 [] [] INFO [main] <ParamInitPlugin.java [319] - platform_cacheDict> <缓存加载：Dict start> 
2016-08-25 13:57:43.115 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.115 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:57:43.115 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:57:43.115 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.115 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.131 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.132 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 13:57:43.133 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.149 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.164 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.180 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 13:57:43.196 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 13:57:43.197 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 13:57:43.198 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <ParamInitPlugin.java [326] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2016-08-25 13:57:43.199 [] [] INFO [main] <ParamInitPlugin.java [335] - platform_cacheParam> <缓存加载：Param start> 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.199 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 13:57:43.215 [] [] INFO [main] <ParamInitPlugin.java [342] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2016-08-25 13:57:43.215 [] [] INFO [main] <ParamInitPlugin.java [113] - start> <缓存参数初始化 end ...> 
2016-08-25 13:57:43.215 [] [] INFO [main] <GenerateCode.java [92] - main> <启动ConfigCore end ......> 
2016-08-25 13:57:43.215 [] [] INFO [main] <GenerateCode.java [94] - main> <根据不同的数据库加载不同的处理器> 
2016-08-25 13:57:43.215 [] [] INFO [main] <MySQLHandler.java [33] - <init>> <db_type = mysql> 
2016-08-25 13:57:43.215 [] [] INFO [main] <MySQLHandler.java [38] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 13:57:43.215 [] [] INFO [main] <MySQLHandler.java [48] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 13:57:43.246 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 13:57:43.246 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 14:03:34.287 [] [] INFO [main] <GenerateCode.java [90] - main> <启动ConfigCore start ......> 
2016-08-25 14:03:34.309 [] [] INFO [main] <ConfigCore.java [53] - <init>> <Beetl设置> 
2016-08-25 14:03:34.310 [] [] DEBUG [main] <ToolBeetl.java [41] - regiseter> <注册全局web视图模板解析> 
2016-08-25 14:03:34.357 [] [] DEBUG [main] <ToolBeetl.java [55] - regiseter> <注册全局BeetlKit模板解析> 
2016-08-25 14:03:34.373 [] [] INFO [main] <ConfigCore.java [56] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 14:03:34.373 [] [] INFO [main] <ConfigCore.java [64] - <init>> <configPlugin 配置Druid数据库连接池大小> 
2016-08-25 14:03:34.373 [] [] INFO [main] <ConfigCore.java [70] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 14:03:34.373 [] [] INFO [main] <ConfigCore.java [78] - <init>> <configPlugin 数据库类型判断> 
2016-08-25 14:03:34.373 [] [] INFO [main] <ConfigCore.java [85] - <init>> <configPlugin 使用数据库类型是 mysql> 
2016-08-25 14:03:34.388 [] [] INFO [main] <ConfigCore.java [105] - <init>> <configPlugin 表扫描注册> 
2016-08-25 14:03:34.509 [] [] INFO [main] <TableScan.java [39] - start> <剔除BaseModelCache> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.partner.Partner, tableName = pre_jn_partner, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2016-08-25 14:03:34.509 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.test.mvc.blog.Blog, tableName = test_blog, pkName: ids> 
2016-08-25 14:03:35.058 [] [] INFO [main] <ConfigCore.java [110] - <init>> <ServicePlugin Service注解实例化加载> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = partnerService, class = com.platform.mvc.partner.PartnerService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = blogService, class = com.test.mvc.blog.BlogService> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2016-08-25 14:03:35.110 [] [] INFO [main] <ConfigCore.java [113] - <init>> <I18NPlugin 国际化键值对加载> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_CN.properties> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_HK.properties> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_TW.properties> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_en_US.properties> 
2016-08-25 14:03:35.110 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_ja.properties> 
2016-08-25 14:03:35.126 [] [] INFO [main] <ConfigCore.java [117] - <init>> <EhCachePlugin EhCache缓存> 
2016-08-25 14:03:35.711 [] [] INFO [main] <ConfigCore.java [127] - <init>> <SqlXmlPlugin 解析并缓存 xml sql> 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2016-08-25 14:03:35.774 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 14:03:35.790 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2016-08-25 14:03:35.806 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 14:03:35.806 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2016-08-25 14:03:35.809 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.810 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noCheckedFilter, sql content =  select ids, names from pt_group where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 14:03:35.810 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.checkedFilter, sql content =  select ids, names from pt_group where ids in ( ${fitler} ) order by names asc > 
2016-08-25 14:03:35.810 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noChecked, sql content =  select ids, names from pt_group order by names asc > 
2016-08-25 14:03:35.811 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and m.operatorids in ( ${fitler} ) order by orderids asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, m.names as modulenames, s.names as systemsnames > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2016-08-25 14:03:35.812 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = partner.sql.xml, sql key = partner.partner.splitPageFrom, sql content =  from pre_jn_partner where 1=1 > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_role order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_role) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_role where ids not in ( select top {1, number, #.#} ids from pt_role ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_role ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2016-08-25 14:03:35.827 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, ui.names, ui.email, ui.mobile, ui.birthday, d.names as deptnames > 
2016-08-25 14:03:35.843 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.userinfoids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and ui.names like #'%$names$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(email)){ %> and ui.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and ui.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(idCard)){ %> and ui.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> and ui.birthday = #'$birthday$'# <% } %> > 
2016-08-25 14:03:35.859 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 14:03:35.859 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = blog.sql.xml, sql key = test.blog.splitPageFrom, sql content =  from test_blog where 1=1 > 
2016-08-25 14:03:35.859 [] [] INFO [main] <ConfigCore.java [131] - <init>> <afterJFinalStart 缓存参数> 
2016-08-25 14:03:35.859 [] [] INFO [main] <ParamInitPlugin.java [89] - start> <缓存参数初始化 start ...> 
2016-08-25 14:03:35.859 [] [] INFO [main] <ParamInitPlugin.java [127] - platform_cacheUser> <缓存加载：User start> 
2016-08-25 14:03:35.859 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.028 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.028 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.028 [] [] INFO [main] <ParamInitPlugin.java [151] - platform_cacheUser> <缓存加载：User end> 
2016-08-25 14:03:36.028 [] [] INFO [main] <ParamInitPlugin.java [159] - platform_cacheUserInfo> <缓存加载：UserInfo start> 
2016-08-25 14:03:36.028 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.075 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.085 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.085 [] [] INFO [main] <ParamInitPlugin.java [183] - platform_cacheUserInfo> <缓存加载：UserInfo end> 
2016-08-25 14:03:36.085 [] [] INFO [main] <ParamInitPlugin.java [191] - platform_cacheGroup> <缓存加载：Group start> 
2016-08-25 14:03:36.085 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.085 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.085 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.085 [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheGroup> <缓存加载：Group end> 
2016-08-25 14:03:36.085 [] [] INFO [main] <ParamInitPlugin.java [223] - platform_cacheRole> <缓存加载：Role start> 
2016-08-25 14:03:36.085 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.102 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.103 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.104 [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheRole> <缓存加载：Role end> 
2016-08-25 14:03:36.104 [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheStation> <缓存加载：Station start> 
2016-08-25 14:03:36.105 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.109 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.110 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.112 [] [] INFO [main] <ParamInitPlugin.java [278] - platform_cacheStation> <缓存加载：Station end> 
2016-08-25 14:03:36.112 [] [] INFO [main] <ParamInitPlugin.java [286] - platform_cacheOperator> <缓存加载：Operator start> 
2016-08-25 14:03:36.112 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 14:03:36.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.112 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 14:03:36.128 [] [] INFO [main] <ParamInitPlugin.java [311] - platform_cacheOperator> <缓存加载：Operator end> 
2016-08-25 14:03:36.128 [] [] INFO [main] <ParamInitPlugin.java [319] - platform_cacheDict> <缓存加载：Dict start> 
2016-08-25 14:03:36.128 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.143 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 14:03:36.159 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.175 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.190 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.206 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.207 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.209 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.210 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.212 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <ParamInitPlugin.java [326] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2016-08-25 14:03:36.228 [] [] INFO [main] <ParamInitPlugin.java [335] - platform_cacheParam> <缓存加载：Param start> 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.228 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 14:03:36.244 [] [] INFO [main] <ParamInitPlugin.java [342] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2016-08-25 14:03:36.244 [] [] INFO [main] <ParamInitPlugin.java [113] - start> <缓存参数初始化 end ...> 
2016-08-25 14:03:36.244 [] [] INFO [main] <GenerateCode.java [92] - main> <启动ConfigCore end ......> 
2016-08-25 14:03:36.244 [] [] INFO [main] <GenerateCode.java [94] - main> <根据不同的数据库加载不同的处理器> 
2016-08-25 14:03:36.244 [] [] INFO [main] <MySQLHandler.java [33] - <init>> <db_type = mysql> 
2016-08-25 14:03:36.244 [] [] INFO [main] <MySQLHandler.java [38] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 14:03:36.244 [] [] INFO [main] <MySQLHandler.java [48] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 14:03:36.290 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 14:03:36.290 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 17:14:03.936 [] [] INFO [main] <GenerateCode.java [90] - main> <启动ConfigCore start ......> 
2016-08-25 17:14:03.954 [] [] INFO [main] <ConfigCore.java [53] - <init>> <Beetl设置> 
2016-08-25 17:14:03.957 [] [] DEBUG [main] <ToolBeetl.java [41] - regiseter> <注册全局web视图模板解析> 
2016-08-25 17:14:03.998 [] [] DEBUG [main] <ToolBeetl.java [55] - regiseter> <注册全局BeetlKit模板解析> 
2016-08-25 17:14:04.013 [] [] INFO [main] <ConfigCore.java [56] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 17:14:04.013 [] [] INFO [main] <ConfigCore.java [64] - <init>> <configPlugin 配置Druid数据库连接池大小> 
2016-08-25 17:14:04.013 [] [] INFO [main] <ConfigCore.java [70] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 17:14:04.013 [] [] INFO [main] <ConfigCore.java [78] - <init>> <configPlugin 数据库类型判断> 
2016-08-25 17:14:04.013 [] [] INFO [main] <ConfigCore.java [85] - <init>> <configPlugin 使用数据库类型是 mysql> 
2016-08-25 17:14:04.029 [] [] INFO [main] <ConfigCore.java [105] - <init>> <configPlugin 表扫描注册> 
2016-08-25 17:14:04.166 [] [] INFO [main] <TableScan.java [39] - start> <剔除BaseModelCache> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.partner.Partner, tableName = pre_jn_partner, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2016-08-25 17:14:04.182 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.test.mvc.blog.Blog, tableName = test_blog, pkName: ids> 
2016-08-25 17:14:04.714 [] [] INFO [main] <ConfigCore.java [110] - <init>> <ServicePlugin Service注解实例化加载> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = partnerService, class = com.platform.mvc.partner.PartnerService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = blogService, class = com.test.mvc.blog.BlogService> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2016-08-25 17:14:04.767 [] [] INFO [main] <ConfigCore.java [113] - <init>> <I18NPlugin 国际化键值对加载> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_CN.properties> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_HK.properties> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_TW.properties> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_en_US.properties> 
2016-08-25 17:14:04.767 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_ja.properties> 
2016-08-25 17:14:04.767 [] [] INFO [main] <ConfigCore.java [117] - <init>> <EhCachePlugin EhCache缓存> 
2016-08-25 17:14:05.362 [] [] INFO [main] <ConfigCore.java [127] - <init>> <SqlXmlPlugin 解析并缓存 xml sql> 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2016-08-25 17:14:05.446 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2016-08-25 17:14:05.463 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2016-08-25 17:14:05.464 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2016-08-25 17:14:05.467 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2016-08-25 17:14:05.467 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2016-08-25 17:14:05.467 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noCheckedFilter, sql content =  select ids, names from pt_group where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.checkedFilter, sql content =  select ids, names from pt_group where ids in ( ${fitler} ) order by names asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noChecked, sql content =  select ids, names from pt_group order by names asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and m.operatorids in ( ${fitler} ) order by orderids asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 17:14:05.469 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, m.names as modulenames, s.names as systemsnames > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2016-08-25 17:14:05.484 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_role order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_role) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_role where ids not in ( select top {1, number, #.#} ids from pt_role ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_role ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2016-08-25 17:14:05.500 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, ui.names, ui.email, ui.mobile, ui.birthday, d.names as deptnames > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.userinfoids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and ui.names like #'%$names$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(email)){ %> and ui.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and ui.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(idCard)){ %> and ui.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> and ui.birthday = #'$birthday$'# <% } %> > 
2016-08-25 17:14:05.515 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:14:05.531 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = blog.sql.xml, sql key = test.blog.splitPageFrom, sql content =  from test_blog where 1=1 > 
2016-08-25 17:14:05.531 [] [] INFO [main] <ConfigCore.java [131] - <init>> <afterJFinalStart 缓存参数> 
2016-08-25 17:14:05.531 [] [] INFO [main] <ParamInitPlugin.java [89] - start> <缓存参数初始化 start ...> 
2016-08-25 17:14:05.531 [] [] INFO [main] <ParamInitPlugin.java [127] - platform_cacheUser> <缓存加载：User start> 
2016-08-25 17:14:05.531 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.685 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.685 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.700 [] [] INFO [main] <ParamInitPlugin.java [151] - platform_cacheUser> <缓存加载：User end> 
2016-08-25 17:14:05.700 [] [] INFO [main] <ParamInitPlugin.java [159] - platform_cacheUserInfo> <缓存加载：UserInfo start> 
2016-08-25 17:14:05.700 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.700 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.746 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.747 [] [] INFO [main] <ParamInitPlugin.java [183] - platform_cacheUserInfo> <缓存加载：UserInfo end> 
2016-08-25 17:14:05.747 [] [] INFO [main] <ParamInitPlugin.java [191] - platform_cacheGroup> <缓存加载：Group start> 
2016-08-25 17:14:05.747 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.747 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.747 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.747 [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheGroup> <缓存加载：Group end> 
2016-08-25 17:14:05.747 [] [] INFO [main] <ParamInitPlugin.java [223] - platform_cacheRole> <缓存加载：Role start> 
2016-08-25 17:14:05.747 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.765 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.766 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.767 [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheRole> <缓存加载：Role end> 
2016-08-25 17:14:05.768 [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheStation> <缓存加载：Station start> 
2016-08-25 17:14:05.768 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.769 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.769 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.769 [] [] INFO [main] <ParamInitPlugin.java [278] - platform_cacheStation> <缓存加载：Station end> 
2016-08-25 17:14:05.769 [] [] INFO [main] <ParamInitPlugin.java [286] - platform_cacheOperator> <缓存加载：Operator start> 
2016-08-25 17:14:05.769 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:14:05.769 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.769 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:14:05.800 [] [] INFO [main] <ParamInitPlugin.java [311] - platform_cacheOperator> <缓存加载：Operator end> 
2016-08-25 17:14:05.800 [] [] INFO [main] <ParamInitPlugin.java [319] - platform_cacheDict> <缓存加载：Dict start> 
2016-08-25 17:14:05.800 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.800 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:14:05.800 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:14:05.800 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.800 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.816 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.831 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:14:05.847 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:14:05.863 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.864 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 17:14:05.869 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <ParamInitPlugin.java [326] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2016-08-25 17:14:05.885 [] [] INFO [main] <ParamInitPlugin.java [335] - platform_cacheParam> <缓存加载：Param start> 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.885 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:14:05.900 [] [] INFO [main] <ParamInitPlugin.java [342] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2016-08-25 17:14:05.900 [] [] INFO [main] <ParamInitPlugin.java [113] - start> <缓存参数初始化 end ...> 
2016-08-25 17:14:05.900 [] [] INFO [main] <GenerateCode.java [92] - main> <启动ConfigCore end ......> 
2016-08-25 17:14:05.900 [] [] INFO [main] <GenerateCode.java [94] - main> <根据不同的数据库加载不同的处理器> 
2016-08-25 17:14:05.900 [] [] INFO [main] <MySQLHandler.java [33] - <init>> <db_type = mysql> 
2016-08-25 17:14:05.916 [] [] INFO [main] <MySQLHandler.java [38] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 17:14:05.916 [] [] INFO [main] <MySQLHandler.java [48] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 17:14:05.947 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 17:14:05.947 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 17:49:35.134 [] [] INFO [main] <GenerateCode.java [90] - main> <启动ConfigCore start ......> 
2016-08-25 17:49:35.134 [] [] INFO [main] <ConfigCore.java [53] - <init>> <Beetl设置> 
2016-08-25 17:49:35.134 [] [] DEBUG [main] <ToolBeetl.java [41] - regiseter> <注册全局web视图模板解析> 
2016-08-25 17:49:35.202 [] [] DEBUG [main] <ToolBeetl.java [55] - regiseter> <注册全局BeetlKit模板解析> 
2016-08-25 17:49:35.202 [] [] INFO [main] <ConfigCore.java [56] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 17:49:35.202 [] [] INFO [main] <ConfigCore.java [64] - <init>> <configPlugin 配置Druid数据库连接池大小> 
2016-08-25 17:49:35.202 [] [] INFO [main] <ConfigCore.java [70] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 17:49:35.202 [] [] INFO [main] <ConfigCore.java [78] - <init>> <configPlugin 数据库类型判断> 
2016-08-25 17:49:35.202 [] [] INFO [main] <ConfigCore.java [85] - <init>> <configPlugin 使用数据库类型是 mysql> 
2016-08-25 17:49:35.233 [] [] INFO [main] <ConfigCore.java [105] - <init>> <configPlugin 表扫描注册> 
2016-08-25 17:49:35.349 [] [] INFO [main] <TableScan.java [39] - start> <剔除BaseModelCache> 
2016-08-25 17:49:35.349 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2016-08-25 17:49:35.349 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2016-08-25 17:49:35.349 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2016-08-25 17:49:35.349 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.partner.Partner, tableName = pre_jn_partner, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2016-08-25 17:49:35.365 [] [] DEBUG [main] <TableScan.java [70] - start> <Model注册： model = class com.test.mvc.blog.Blog, tableName = test_blog, pkName: ids> 
2016-08-25 17:49:35.903 [] [] INFO [main] <ConfigCore.java [110] - <init>> <ServicePlugin Service注解实例化加载> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = partnerService, class = com.platform.mvc.partner.PartnerService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = blogService, class = com.test.mvc.blog.BlogService> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <ServicePlugin.java [75] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2016-08-25 17:49:35.941 [] [] INFO [main] <ConfigCore.java [113] - <init>> <I18NPlugin 国际化键值对加载> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_CN.properties> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_HK.properties> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_zh_TW.properties> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_en_US.properties> 
2016-08-25 17:49:35.941 [] [] DEBUG [main] <I18NPlugin.java [133] - start> <加载国际化资源文件：C:\work\jxclub\jfinalUIB\JFinalUIBV2\WebContent\WEB-INF\classes\message_ja.properties> 
2016-08-25 17:49:35.941 [] [] INFO [main] <ConfigCore.java [117] - <init>> <EhCachePlugin EhCache缓存> 
2016-08-25 17:49:36.485 [] [] INFO [main] <ConfigCore.java [127] - <init>> <SqlXmlPlugin 解析并缓存 xml sql> 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2016-08-25 17:49:36.566 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2016-08-25 17:49:36.584 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2016-08-25 17:49:36.584 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' > 
2016-08-25 17:49:36.585 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2016-08-25 17:49:36.585 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2016-08-25 17:49:36.586 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noCheckedFilter, sql content =  select ids, names from pt_group where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.checkedFilter, sql content =  select ids, names from pt_group where ids in ( ${fitler} ) order by names asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.noChecked, sql content =  select ids, names from pt_group order by names asc > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 17:49:36.588 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and m.operatorids in ( ${fitler} ) order by orderids asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, m.names as modulenames, s.names as systemsnames > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2016-08-25 17:49:36.604 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_role order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_role) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_role where ids not in ( select top {1, number, #.#} ids from pt_role ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_role ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2016-08-25 17:49:36.619 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, ui.names, ui.email, ui.mobile, ui.birthday, d.names as deptnames > 
2016-08-25 17:49:36.635 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.userinfoids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and ui.names like #'%$names$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(email)){ %> and ui.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and ui.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(idCard)){ %> and ui.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> and ui.birthday = #'$birthday$'# <% } %> > 
2016-08-25 17:49:36.651 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2016-08-25 17:49:36.651 [] [] DEBUG [main] <SqlXmlPlugin.java [188] - parseDoc> <sql加载, sql file = blog.sql.xml, sql key = test.blog.splitPageFrom, sql content =  from test_blog where 1=1 > 
2016-08-25 17:49:36.651 [] [] INFO [main] <ConfigCore.java [131] - <init>> <afterJFinalStart 缓存参数> 
2016-08-25 17:49:36.651 [] [] INFO [main] <ParamInitPlugin.java [89] - start> <缓存参数初始化 start ...> 
2016-08-25 17:49:36.651 [] [] INFO [main] <ParamInitPlugin.java [127] - platform_cacheUser> <缓存加载：User start> 
2016-08-25 17:49:36.651 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.851 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.866 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.866 [] [] INFO [main] <ParamInitPlugin.java [151] - platform_cacheUser> <缓存加载：User end> 
2016-08-25 17:49:36.866 [] [] INFO [main] <ParamInitPlugin.java [159] - platform_cacheUserInfo> <缓存加载：UserInfo start> 
2016-08-25 17:49:36.866 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.866 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.920 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.920 [] [] INFO [main] <ParamInitPlugin.java [183] - platform_cacheUserInfo> <缓存加载：UserInfo end> 
2016-08-25 17:49:36.920 [] [] INFO [main] <ParamInitPlugin.java [191] - platform_cacheGroup> <缓存加载：Group start> 
2016-08-25 17:49:36.920 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.920 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.920 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.920 [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheGroup> <缓存加载：Group end> 
2016-08-25 17:49:36.920 [] [] INFO [main] <ParamInitPlugin.java [223] - platform_cacheRole> <缓存加载：Role start> 
2016-08-25 17:49:36.920 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.936 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.936 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.936 [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheRole> <缓存加载：Role end> 
2016-08-25 17:49:36.936 [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheStation> <缓存加载：Station start> 
2016-08-25 17:49:36.936 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.936 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.936 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.952 [] [] INFO [main] <ParamInitPlugin.java [278] - platform_cacheStation> <缓存加载：Station end> 
2016-08-25 17:49:36.952 [] [] INFO [main] <ParamInitPlugin.java [286] - platform_cacheOperator> <缓存加载：Operator start> 
2016-08-25 17:49:36.952 [] [] DEBUG [main] <ToolSqlXml.java [97] - getSql> <beetl解析sql> 
2016-08-25 17:49:36.952 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.952 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2016-08-25 17:49:36.985 [] [] INFO [main] <ParamInitPlugin.java [311] - platform_cacheOperator> <缓存加载：Operator end> 
2016-08-25 17:49:36.985 [] [] INFO [main] <ParamInitPlugin.java [319] - platform_cacheDict> <缓存加载：Dict start> 
2016-08-25 17:49:36.986 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 17:49:36.988 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.004 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.020 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:49:37.035 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.051 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.066 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.068 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.071 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:37.072 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2016-08-25 17:49:37.075 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.076 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2016-08-25 17:49:37.078 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 17:49:37.079 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2016-08-25 17:49:37.080 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:37.081 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2016-08-25 17:49:37.083 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 17:49:37.084 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2016-08-25 17:49:37.085 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.085 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2016-08-25 17:49:37.087 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 17:49:37.088 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2016-08-25 17:49:37.088 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.089 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <ParamInitPlugin.java [326] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2016-08-25 17:49:37.090 [] [] INFO [main] <ParamInitPlugin.java [335] - platform_cacheParam> <缓存加载：Param start> 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param:  empty  
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.090 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2016-08-25 17:49:37.105 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.105 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.105 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.105 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2016-08-25 17:49:37.105 [] [] INFO [main] <ParamInitPlugin.java [342] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2016-08-25 17:49:37.105 [] [] INFO [main] <ParamInitPlugin.java [113] - start> <缓存参数初始化 end ...> 
2016-08-25 17:49:37.105 [] [] INFO [main] <GenerateCode.java [92] - main> <启动ConfigCore end ......> 
2016-08-25 17:49:37.105 [] [] INFO [main] <GenerateCode.java [94] - main> <根据不同的数据库加载不同的处理器> 
2016-08-25 17:49:37.105 [] [] INFO [main] <MySQLHandler.java [33] - <init>> <db_type = mysql> 
2016-08-25 17:49:37.105 [] [] INFO [main] <MySQLHandler.java [38] - <init>> <configPlugin 配置Druid数据库连接池连接属性> 
2016-08-25 17:49:37.105 [] [] INFO [main] <MySQLHandler.java [48] - <init>> <configPlugin 配置ActiveRecord插件> 
2016-08-25 17:49:37.137 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
2016-08-25 17:49:37.137 [] [] INFO [main] <Dialect.java [129] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: String   param value: jfinaluib 
 param index: 2   param type: String   param value: pre_jn_partner 
 > 
